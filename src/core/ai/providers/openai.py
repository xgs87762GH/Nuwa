# OpenAI Provider Module

from typing import Optional

import httpx

from src.core.config.ai import AiConfigLoader
from src.core.config.logger import get_logger
from src.core.config.models import AIConfig
from src.core.config.models import AIProvider

LOGGER = get_logger(__name__)


class OpenAIProvider:
    def __init__(self, config: AIConfig):
        self.config = config
        self.base_url = config.base_url
        self.headers = {
            "Authorization": f"Bearer {config.api_key}",
            "Content-Type": "application/json"
        }
        self.system_prompt: Optional[str] = None
        self.user_prompt: Optional[str] = None

    def set_prompt(self, system_prompt: str, user_prompt: str):
        """Set up model prompts
        :param system_prompt: System prompt
        :param user_prompt: User prompt
        """
        self.system_prompt = system_prompt
        self.user_prompt = user_prompt

    async def get_completion(self, model: str = "gpt-3.5-turbo") -> str:
        """
        Get the text generated by the model
        :param model: The name of the model
        :return: The generated text
        """
        if not self.system_prompt or not self.user_prompt:
            raise ValueError("Prompts not set. Call set_prompt() first.")

        payload = {
            "model": model,
            "messages": [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": self.user_prompt}
            ],
            "max_tokens": getattr(self.config, 'max_tokens', 2048),
            "temperature": getattr(self.config, 'temperature', 0.7)
        }

        # 使用配置中的超时设置
        timeout = httpx.Timeout(
            timeout=self.config.request_timeout,
            connect=getattr(self.config, 'connect_timeout', 30),
            read=getattr(self.config, 'read_timeout', self.config.request_timeout)
        )

        async with httpx.AsyncClient(timeout=timeout) as client:
            LOGGER.debug(f"{self.base_url}/chat/completions")

            try:
                response = await client.post(
                    f"{self.base_url}/chat/completions",
                    headers=self.headers,
                    json=payload
                )

                if response.status_code == 200:
                    response_data = response.json()
                    return response_data["choices"][0]["message"]["content"]
                else:
                    # 处理错误响应
                    try:
                        response_data = response.json()
                        error_msg = response_data.get("error", {}).get("message", "Unknown error")
                    except:
                        error_msg = response.text

                    raise Exception(f"OpenAI API Error {response.status_code}: {error_msg}")

            except httpx.ConnectTimeout:
                raise Exception(f"Connection timeout to {self.base_url}")
            except httpx.ReadTimeout:
                raise Exception(f"Read timeout from {self.base_url}")
            except httpx.RequestError as e:
                raise Exception(f"Request error: {str(e)}")
            except Exception as e:
                raise Exception(f"Unexpected error: {str(e)}")


async def simple_test():
    system_prompt = """You are an intelligent plugin routing system. Filter suitable plugins based on user requirements. Current Time: 2025-09-03 10:37:02, 
    User: Gordon. Available: [{'plugin_name':'camera-plugin','plugin_id':'db111534-bddd-4a05-be3f-2c222c069a53','description':'Plugin for camera operations and configurations',
    'tags':['camera','recording','photo','video','plugin','mcp']}]. Return JSON: {"analysis":"User intent analysis","selected_plugins":
    [{"plugin_name":"Plugin name","plugin_id":"Plugin ID","reason":"Selection reason","confidence":0.9}],"overall_confidence":0.8}. Principles: 1.Match descriptions/tags 
    2.Consider relevance 3.Multiple if needed 4.Confidence 0.0-1.0 5.Only needed plugins 6.Plugin-level only."""

    user_prompt = "User Requirement: Help me take a photo. Analyze intent and filter suitable plugins."

    config = AiConfigLoader()
    confs = config.ai_configs

    for conf in confs:
        if conf.provider == AIProvider.OPENAI:
            provider = OpenAIProvider(conf.config)
            provider.set_prompt(system_prompt, user_prompt)

            try:
                response = await provider.get_completion()
                print("Response:", response)

                import json
                try:
                    parsed = json.loads(response)
                    print("JSON:", json.dumps(parsed, separators=(',', ':')))
                except:
                    print("Invalid JSON")

            except Exception as e:
                print(f"Error: {e}")
            break


if __name__ == '__main__':
    import asyncio

    asyncio.run(simple_test())
