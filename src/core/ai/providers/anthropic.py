# Anthropic Provider Module

import httpx
from typing import Optional

from src.core.ai.manager import LOGGER
from src.core.config import get_logger
from src.core.config.models import AIConfig

LOGGER = get_logger(__name__)


class AnthropicProvider:
    def __init__(self, config: AIConfig):
        self.config = config
        self.base_url = config.base_url
        self.headers = {
            "x-api-key": f"{config.api_key}",
            "Content-Type": "application/json",
            "anthropic-version": "2023-06-01"
        }
        self.system_prompt: Optional[str] = None
        self.user_prompt: Optional[str] = None

    def set_prompt(self, system_prompt: str, user_prompt: str):
        """Set up model prompts
        :param system_prompt: System prompt
        :param user_prompt: User prompt
        """
        self.system_prompt = system_prompt
        self.user_prompt = user_prompt

    async def get_completion(self, model: str = "claude-3-5-sonnet-20241022") -> str:
        """
        Get the text generated by the model
        :param model: The name of the model
        :return: The generated text
        """
        if not self.system_prompt or not self.user_prompt:
            raise ValueError("Prompts not set. Call set_prompt() first.")

        payload = {
            "model": model,
            "max_tokens": getattr(self.config, 'max_tokens', 2048),
            "temperature": getattr(self.config, 'temperature', 0.7),
            "system": self.system_prompt,
            "messages": [
                {"role": "user", "content": self.user_prompt}
            ]
        }

        # 使用配置中的超时设置
        timeout = httpx.Timeout(
            timeout=self.config.request_timeout,
            connect=getattr(self.config, 'connect_timeout', 30),
            read=getattr(self.config, 'read_timeout', self.config.request_timeout)
        )

        async with httpx.AsyncClient(timeout=timeout) as client:
            LOGGER.debug(f"{self.base_url}/messages")

            try:
                response = await client.post(
                    f"{self.base_url}/messages",
                    headers=self.headers,
                    json=payload
                )

                if response.status_code == 200:
                    response_data = response.json()
                    return response_data["content"][0]["text"]
                else:
                    # 处理错误响应
                    try:
                        response_data = response.json()
                        error_msg = response_data.get("error", {}).get("message", "Unknown error")
                    except:
                        error_msg = response.text

                    raise Exception(f"Anthropic API Error {response.status_code}: {error_msg}")

            except httpx.ConnectTimeout:
                raise Exception(f"Connection timeout to {self.base_url}")
            except httpx.ReadTimeout:
                raise Exception(f"Read timeout from {self.base_url}")
            except httpx.RequestError as e:
                raise Exception(f"Request error: {str(e)}")
            except Exception as e:
                raise Exception(f"Unexpected error: {str(e)}")
